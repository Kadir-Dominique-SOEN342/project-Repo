# OCL for UML Class Diagram

## Attributes

--each Instrucotrs must have a unique phoneNumber
Context Registration
inv : self.registerIns -> forAll (i2,i2 : Instructor| i1 <> i2 implies i1.phoneNumber <> i2.phoneNumber )

--each Client must have a unique username
Context Registration
inv : self.registerClient -> forAll (c2,c2 : Client| e1 <> e2 implies i1.userName <> i2.userName )

--each underageClient needs to have a less than 18 years old
Context UnderageCleint
inv : self.age < 18

-- underageClient legal guardians need to be adults
Context UnderageCleint
inv : self.legalGuardian.age >= 18

---two timeslots in a day cannot have an endtime before a startTime
context Days
inv : self.timetabled ->

## Operations

#### signupToLesson

--Offering Lesson Collection includess a lesson l with l.lessonID
--the lesson with the lessonID has no instructor and the city of the space of the lesson is contained in the instructor availabitly collection.

context Offering::signupToLesson(ins : Instructor , id : String)
pre: self.offers-lesson-> exist(l : Lesson |
l.lessonID = id and
not l.hasInstrutor and
ins.availability -> include(l.space.city))
post : ins.teaches -> includes(l : Lesson | l.lessonID = id and
l.hasInstructor and
l.teacher = ins)

#### makeBooking

--Lesson information is captured in makeBooking, so it's not part of the precondition. This postcondition is broader than the postcondition in createBooking where we specify the lesson the booking must be associated with.
context::makeBooking(cl:Client)
pre:
post: self.bookingCatalog.Booking ->include(b:Booking | b.Client = cl)

#### underageBooking

context::underageBooking(cl:Client)
--the Client is an adult client
pre: cl.age >=18
--

#### viewBooking

** Make sure to enter all the preconditoons for the operation contracts
** make sure to enter all post conditions for operation contracts
